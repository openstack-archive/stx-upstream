#!/bin/sh

### BEGIN INIT INFO
# Provides:
# Required-Start: $remote_fs $network $syslog
# Required-Stop: $remote_fs $syslog
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: Ceilometer Servers
# Description: OpenStack Monitoring Service (code-named Ceilometer) server(s)
### END INIT INFO

# Platform paths and flags
. /usr/bin/tsconfig

SUFFIX=polling
DESC="ceilometer-$SUFFIX"
DAEMON="/usr/bin/ceilometer-$SUFFIX"
CONFIG="/etc/ceilometer/ceilometer.conf"
PIDFILE="/var/run/ceilometer-$SUFFIX.pid"
COMPLETED="/etc/platform/.initial_config_complete"

start() 
{
    if [ ! -f $COMPLETED ]; then
        echo "Waiting for for $COMPLETED"
        exit 0
    fi

    . $PLATFORM_CONF_FILE
    if [[ "$nodetype" == "worker" || "$subfunction" == *"worker"* ]] ; then
        if [ ! -f $VOLATILE_WORKER_CONFIG_COMPLETE ]; then
            # Do not start polling until compute manifests have been applied
            echo "Waiting for $VOLATILE_WORKER_CONFIG_COMPLETE"
            exit 0
        elif [ -f $VOLATILE_DISABLE_WORKER_SERVICES ]; then
            # Do not start polling if compute services are disabled. This can
            # happen during an upgrade when controller-1 is running a newer
            # load than controller-0.
            echo "Waiting for $VOLATILE_DISABLE_WORKER_SERVICES"
            exit 0
        fi
    fi

    if [ -e $PIDFILE ]; then
        PIDDIR=/proc/$(cat $PIDFILE)
        if [ -d ${PIDDIR} ]; then
            echo "$DESC already running."
            exit 1
        else
            echo "Removing stale PID file $PIDFILE"
            rm -f $PIDFILE
        fi
    fi

    if [ ! -d /var/log/ceilometer ]; then
        mkdir /var/log/ceilometer
    fi

    echo -n "Starting $DESC..."

    start-stop-daemon --start --quiet --background \
        --pidfile ${PIDFILE} --make-pidfile --exec ${DAEMON} \
	-- --config-file $CONFIG --log-dir=/var/log/ceilometer

    if [ $? -eq 0 ]; then
        echo "done."
    else
        echo "failed."
    fi
}

stop() 
{
    echo -n "Stopping $DESC..."
    start-stop-daemon --stop --quiet --pidfile $PIDFILE
    if [ $? -eq 0 ]; then
        echo "done."
    else
        echo "failed."
    fi
    rm -f $PIDFILE
}

status()
{
    pid=`cat $PIDFILE 2>/dev/null`
    if [ -n "$pid" ]; then
        if ps -p $pid &>/dev/null ; then
            echo "$DESC is running"
            return
        fi
    fi
    echo "$DESC is not running"
}

reset()
{
    stop

    # This is to make sure postgres is configured and running
    if ! pidof postmaster > /dev/null; then
        /etc/init.d/postgresql-init
        /etc/init.d/postgresql start
        sleep 2
    fi
    [ ! -d /var/log/ceilometer ] && mkdir /var/log/ceilometer
    sudo -u postgres dropdb ceilometer
    sudo -u postgres createdb ceilometer
    ceilometer-dbsync

    start
}

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart|force-reload|reload)
        stop
        start
        ;;
    status)
	status
        ;;
    reset)
	reset
        ;;
    *)
        echo "Usage: $0 {start|stop|force-reload|restart|reload|status|reset}"
        exit 1
        ;;
esac

exit 0
